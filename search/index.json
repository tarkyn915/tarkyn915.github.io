[{"content":"Nginx官网\n基础模板 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 server { listen 80; listen 443 ssl http2; listen [::]:80; listen [::]:443 ssl http2; root /var/www/html; index index index.html index.htm; server_name xxx.xxx; ssl_certificate /root/xxx.xxx.crt; ssl_certificate_key /root/xxx.xxx.key; location / { try_files $uri $uri/ =404; } } 反向代理 docker容器内反代推荐使用 nginx-proxy-manager\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #内部反代 server { listen 80; server_name xxx.xxx.xxx; location / { #用于获取用户真实IP proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #将域名的请求发到8080的端口 proxy_pass http://127.0.0.1:8080; } } #外部反代 server { listen 80; server_name www.example.com; location / { proxy_pass http://example.com:80; } } server { listen 443 ssl; server_name www.example.com; ssl_certificate /etc/nginx/ssl/server.crt; ssl_certificate_key /etc/nginx/ssl/server.key; location / { proxy_pass https://example.com:443; } } 没有证书，就反代80端口\n限制上传大小 1 2 3 4 5 client_max_body_size 10m; # 设置到http{}内，控制全局nginx所有请求报文(附件)大小； # 设置到server{}内，控制该server的所有请求报文(附件)大小； # 设置到location{}内，只控制满足该路由规则的请求报文(附件)大小。 ssl优化 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #ssl协议相关 ssl_protocols TLSv1.2 TLSv1.3; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; ssl_prefer_server_ciphers on; #ssl缓存优化 ssl_session_cache shared:SSL:10m; ssl_session_timeout 10m; # 指定TLS协议版本 1.2和1.3 # 定义加密套件和算法 # 服务器加密套件优先级 # SSL会话缓存类型和大小 # SSL会话缓存储存时间 ","date":"2023-12-15T00:00:00Z","permalink":"https://blog.tjq.one/p/nginx-config/","title":"Nginx config"},{"content":"This post records some python instructions for fast search\n变量和简单的数据类型 变量 变量通常被描述为一个盒子，里面装了特定的值 在程序中可以随便修改变量的值，python始终记录变量的最新值\n1 2 3 4 5 6 7 message = \u0026#34;hello world\u0026#34; print(message) message = \u0026#34;hello python\u0026#34; print(message) --- hello world hello python 1变量名只能包含字母、数字、下划线 2变量名不能包含空格，大部分情况用下划线 3Python的关键字不能用来作为变量名字 4尽量使用简洁方便理解的名字\n字符串 字符串是Python中最常见的数据类型，用(\u0026rsquo;\u0026rsquo; \u0026quot; \u0026ldquo;)单引号or双引号来创建字符串 下面举例一些简单的字符串操作(首字母大小写，删除空白)\n1 2 3 4 5 6 7 8 9 10 name = \u0026#34;tarkyn abc\u0026#34; print(name.title()) --- Tarkyn Abc name.title() 首字母全大写 name.lower() 首字母全小写 name.rstrip() 删除左空白 name.lstrip() 删除右空白 name.strip() 剔除字符串两边空白 制表符 \\t 换行符\\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 print(\u0026#34;python\u0026#34;) print(\u0026#34;\\tpython\u0026#34;) --- python python print(\u0026#34;python\u0026#34;) print(\u0026#34;\\npython\\njava\\nc\u0026#34;) --- python python java c 在字符串中使用变量\n1 2 3 4 5 6 first_name = \u0026#34;tarkyn\u0026#34; last_name = \u0026#34;abc\u0026#34; message = f\u0026#34;hello, {first_name}{last_name}\u0026#34; print(message.title()) --- Hello, Tarkynabc f是字符串format，python通过 花括号内的变量替换成字符串的格式 f是python3.6引入的，如果是之前的版本可能需要format()\nPython数字 Python数值类型通常有以下5种 ● 整型(int) 通常称为整型或整数，是正或负的整数，没有小数点 ● 长整型(long) 无限大小的整数，整数最后一个是大写或者小写的L ● 浮点型(float) 浮点型由整数部分与小数部分组成 ● 复数(complex) 复数由实数部分和虚数部分构成 ● 布尔型(bool) 布尔型是整数的子类型，布尔值有两个取值 True和False，分别对应整型的1和0\nPython中可以执行 + - * / 运算\n1 2 3 4 5 6 1/2 #传统除 1//2 #地板除 number = 100_000_000 #可以使用下划线将数字分类，清晰易读 x,y,z = 1,2,3 #可以同时给多个变量命名 列表简介 序列是Python中基本的数字结构，序列中每个元素都有一个数字表示他的位置or索引，第一个是0第二个是1 序列中开始都是0 列表是Python中常见的数据类型，和字符串一样，列表索引从0开始\n1 2 3 list = [\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;c\u0026#34;,\u0026#34;d\u0026#34;] list2 = [1, 2, 3, 4, 5] print(list[0]) 更新列表 1 2 3 4 5 6 7 8 list = [] list.append(\u0026#39;google\u0026#39;) # append()添加一个元素到列表末尾 list.append(\u0026#39;baidu\u0026#39;) list[1] = \u0026#34;Bing\u0026#34; list.insert(2,\u0026#39;yahu\u0026#39;) # insert()在列表任何位置插入新元素 print(list) --- [\u0026#39;google\u0026#39;,\u0026#39;Bing\u0026#39;,\u0026#39;yahu\u0026#39;] 删除列表 如果要从列表中删除一个元素并且不在用任何方式使用它就用del(),如果删除了元素之后还要使用那就用pop()\n1 2 3 4 5 6 7 list1 = [\u0026#39;1988\u0026#39;,\u0026#39;2000\u0026#39;,\u0026#39;2010\u0026#39;,\u0026#39;2020\u0026#39;] del list1[0] # 如果知道要删除元素在列表中的位置，可以用del() fruit = [\u0026#39;apple\u0026#39;,\u0026#39;banana\u0026#39;,\u0026#39;pear\u0026#39;] pop_fruit = fruit.pop() # pop()删除列表末尾的值，保存在另一个值中继续使用，也叫弹出 prtin(fruit) # pop()可以弹出列表中任意位置的元素，在()中指定索引即可 [\u0026#39;apple\u0026#39;,\u0026#39;banana\u0026#39;] 组织列表 Python中用sort()可以对列表进行一个排序,假设有一个汽车列表，我要进行字母排序 sort()方法永久性地修改列表元素的排序顺序，再也无法恢复原来的列表顺序\n1 2 3 4 5 cars = [\u0026#39;bmw\u0026#39;,\u0026#39;audi\u0026#39;,\u0026#39;toyota\u0026#39;,\u0026#39;subaru\u0026#39;] cars.sort() # 向sort传递参数reverse=True就会反向排序列表 print(cars) --- [\u0026#39;audi\u0026#39;,\u0026#39;bmw\u0026#39;,\u0026#39;subaru\u0026#39;,\u0026#39;toyota\u0026#39;] 要保留元素原来的排列顺序，同时用特定的顺序展示，可以用函数sorted() sorted()可以让元素按照特定顺序展示，同时不影响他们在列表中的排列顺序\n1 2 3 4 5 6 7 8 9 10 cars = [\u0026#39;bmw\u0026#39;,\u0026#39;audi\u0026#39;,\u0026#39;toyota\u0026#39;,\u0026#39;subaru\u0026#39;] print(cars) cars = [\u0026#39;bmw\u0026#39;,\u0026#39;audi\u0026#39;,\u0026#39;toyota\u0026#39;,\u0026#39;subaru\u0026#39;] #也可以向函数sorted()传递参数 reverse=True反向临时排序 print(sorted(cars)) cars = [\u0026#39;bmw\u0026#39;,\u0026#39;audi\u0026#39;,\u0026#39;toyota\u0026#39;,\u0026#39;subaru\u0026#39;] print(cars) --- [\u0026#39;bmw\u0026#39;, \u0026#39;audi\u0026#39;, \u0026#39;toyota\u0026#39;, \u0026#39;subaru\u0026#39;] [\u0026#39;audi\u0026#39;, \u0026#39;bmw\u0026#39;, \u0026#39;subaru\u0026#39;, \u0026#39;toyota\u0026#39;] [\u0026#39;bmw\u0026#39;, \u0026#39;audi\u0026#39;, \u0026#39;toyota\u0026#39;, \u0026#39;subaru\u0026#39;] 要反转列表元素的排列顺序，可以使用方法reverse()\n1 2 3 4 5 cars = [\u0026#39;bmw\u0026#39;,\u0026#39;audi\u0026#39;,\u0026#39;toyota\u0026#39;,\u0026#39;subaru\u0026#39;] cars.reverse() #注意reverse()不是按字母顺序排序，而是反转列表的顺序，也是永久性的，可以再次反转 print(cars) --- [\u0026#39;subaru\u0026#39;,\u0026#39;toyota\u0026#39;,\u0026#39;audi\u0026#39;,\u0026#39;bmw\u0026#39;] 使用函数len()可以快速知道列表的长度 len(cars) Python计算元素数量从1开始所以不会有问题\n操作列表 常常需要遍历列表的所有元素，对每个元素进行操作\nfor循环遍历列表 用for循环打印水果名单中的所有水果,这行代码从列表fruits中提取一个元素然后和fruit关联 ```python fruits = ['apple','banana','pear','orange'] for fruit in fruits: print (fruit) --- apple banana pear orange ``` 1 2 3 4 5 6 7 8 fruits = [\u0026#39;apple\u0026#39;,\u0026#39;banana\u0026#39;,\u0026#39;pear\u0026#39;,\u0026#39;orange\u0026#39;] for fruit in fruits: print (f\u0026#34;I what to eat{fruit}\u0026#34;) --- I what to eat apple I what to eat banana I what to eat pear I what to eat orange for循环需要注意缩进和冒号\n创建数值列表 1 2 3 4 5 6 7 8 list(range(6)) list(range(0,6)) list(range(0,6,2)) 列表解析 abc = [b**2 for b in range(1,11)] #用多行代码比较复杂繁琐就需要列表解析 print(abc) 数字列表简单的统计计算 1 2 3 4 digits = [1,2,3,4,5,6,7,8,9,0] min(digits) # 最小值 max(digits) # 最大值 sum(digits) # 求和 列表切片 打印列表的2、3、4个(索引就是1、2、3) 头尾减一就可以了，不会搞错\n1 2 3 fruits = [\u0026#39;apple\u0026#39;,\u0026#39;banana\u0026#39;,\u0026#39;pear\u0026#39;,\u0026#39;orange\u0026#39;] print(players[1:3]) #从索引1-3 print(players[1:3:2]) #从索引1-3每隔2个元素提取一个 默认为1 遍历切片，其实就是用for循环打印一段话加上列表的切片\n1 2 3 4 fruits = [\u0026#39;apple\u0026#39;,\u0026#39;banana\u0026#39;,\u0026#39;pear\u0026#39;,\u0026#39;orange\u0026#39;] print(\u0026#34;my favourite fruit is:\u0026#34;) for fruit in fruits[0:3]: print(fruit) 复制列表\n1 2 3 4 5 6 my_foods = [\u0026#39;pizza\u0026#39;,\u0026#39;carrot\u0026#39;,\u0026#39;cake\u0026#39;] friend_foods = my_foods[:] #只需要在复制的列表后面加一个切片并省略启示和终止索引就可以了 --- 复制列表使用切片 friend_foods = my_foods[:] 如果使用friend_foods = my_foods 就会有一个问题，这两个永远都变成一样的了，后续不能单独修改某一个列表了 元组 需要创建一系列不可修改的元素，元组可以满足这种需求，Python将不能修改的值称为~不可变的~,不可变的列表被称为元组\n1 2 3 dimensions = (200,50) for dimesion in dimensions: print(dimesion) 虽然不能修改元组的元素，但是可以给元组重新赋值 dimensions = (200,50)\ndimensions = (400,100) 相比于列表，元组是更加简单的数据结构。如果要存储一些值在生命周期内不会发生改变就可以用元组\nPython条件语句 在python中if语句可以检查当前程序的状态，并采取相应的措施\n1 2 3 4 5 6 cars = [\u0026#39;audi\u0026#39;,\u0026#39;bmw\u0026#39;,\u0026#39;toyota\u0026#39;,\u0026#39;subaru\u0026#39;] for car in cars: if car == \u0026#39;bmw\u0026#39;: print(car.upper()) else: print(car.title()) 这个案例中如果遇到是bmw就全大写，不是bmw的就首字母大写\n简单的条件测试 1 2 3 4 5 6 7 8 9 car = \u0026#39;bmw\u0026#39; #检查是否相等 car == \u0026#39;audi\u0026#39; car = \u0026#39;Audi\u0026#39; #检查是否忽略大小写 car = \u0026#39;audi\u0026#39; requested_topping = \u0026#34;mushrooms\u0026#34; #检查是否不相等 要判断两个值是否不相等，可以用(!=) if requested_topping != \u0026#39;anchovies\u0026#39;: print(\u0026#34;hello the anchovies!\u0026#34;) 数值比较 1 2 3 4 5 6 7 8 9 10 age = 19 age == 18 false age \u0026lt; 18 false age \u0026gt; 18 true 也可以比较多个条件 and必须要两个条件都满足，or只需要一个条件满足就可以了 age_0 = 20 age_1 = 21 age_0 \u0026gt; 19 and age_1 \u0026gt; 19 #改善可读性可以把测试代码放在圆括号中(age_0 \u0026gt; 10) and (age_1 \u0026lt;= 21) age_0 \u0026gt; 19 or age_1 \u0026gt; 19 布尔式表达 布尔式通常用于记录条件，比如游戏正在运行中，是否可以编辑。\n1 2 game_active = true can_edit = false Python条件语句 Python程序语言指定非0和非空 (null)的值为true，0或者 null为false\nPython中 if 语句常见的形式\n1 2 3 4 5 age = 18 if age \u0026lt; 18: 执行语句... else age \u0026gt;=18: 执行语句... 1 2 3 4 5 6 if age \u0026lt; 18: 执行语句... elif age = 18: 执行语句... else age \u0026gt; 18: 执行语句... 1 2 3 4 5 6 7 8 if age \u0026lt; 18: 执行语句... elif age == 25: 执行语句... elif age \u0026gt;25\u0026lt;45: 执行语句... elif：age \u0026gt;=65: 执行语句... Python 字典 字典是另一种可变容器模型，且可以储存任意类型对象\n字典的每个键值key：value 用：分割，整个字典包括在花括号{}中\n1 b = {key1 : value1 , key2 : value2} 键是必须不可变的，值可以取任何数据类型，数，字符串，列表，乃至字典\n1 2 dic1 = { \u0026#39;abc\u0026#39;: 123 } dic2 = {\u0026#39;abc\u0026#39;: 456 , 66 : 30 } 字典的修改更新和删除 1 2 3 4 dic1 = {\u0026#39;name\u0026#39;:\u0026#39;zhangsan\u0026#39;,\u0026#39;age\u0026#39;:18,\u0026#39;class\u0026#39;:\u0026#39;first\u0026#39; } dic1[\u0026#39;age\u0026#39;] = 19 #更新 dic1[\u0026#39;school\u0026#39;] = \u0026#39;US\u0026#39; #添加 1 2 3 4 5 dic1 = {\u0026#39;name\u0026#39;:\u0026#39;zhangsan\u0026#39;,\u0026#39;age\u0026#39;:18,\u0026#39;class\u0026#39;:\u0026#39;first\u0026#39; } del dic1[\u0026#39;name\u0026#39;] # 删除键是\u0026#39;name\u0026#39;的条目 dic1.clear() # 清空字典的所有条目 del dic1 # 删除字典 删除字典后 Print 会引发一个报错，因为del之后字典就不存在了\n如果指定的值有可能不存在可以用 get() ，如果字典中没有指定的值会返回 None\n遍历字典 用 for循环遍历字典，可申明两个变量，用于储存键和值，用 items() 返回一个键值列表\n1 2 3 4 5 6 7 favorite_languages = { \u0026#39;jen\u0026#39;: \u0026#39;python\u0026#39;, \u0026#39;zs\u0026#39;: \u0026#39;c++\u0026#39;, \u0026#39;ls\u0026#39;: \u0026#39;java\u0026#39;, } for name,language in favorite_languages.items(): print(f\u0026#34;{name} favorite language is {language}\u0026#34;) 遍历字典中所有的键用 keys() ， 遍历字典中所有的值用 values() ， 这个做法提取字典中所有的值，而没有考虑重复的问题，要提取集合中独一无二的用 set()\n1 2 3 4 5 for name in favorite_language.keys(): # keys() for language in favorite_language.values(): # values() for language in set(favorite_language.values()): # set() 字典列表嵌套 将一系列字典储存在列表中，或将列表作为值储存在字典中，称为嵌套。 其实就是套中套\n在字典中储存列表，在字典中储存字典\n1 2 3 4 5 6 for alines_number in range(30): new_alines = {\u0026#39;color\u0026#39;: \u0026#39;red\u0026#39;,\u0026#39;points\u0026#39;:\u0026#39;5\u0026#39;,\u0026#39;speed\u0026#39;:\u0026#39;10\u0026#39;} alines.append(new_alines) for alines in alines[:30]: print(alines) 1 2 3 4 computer = { \u0026#39;cpu\u0026#39;: 3500x \u0026#39;ram\u0026#39;: [\u0026#39;8g_1\u0026#39;, \u0026#39;8g_2\u0026#39;] } 1 2 3 4 5 6 7 8 9 10 11 12 users = { zhangsan:{ \u0026#39;first\u0026#39;: \u0026#39;zhang\u0026#39; \u0026#39;last\u0026#39;: \u0026#39;san\u0026#39; \u0026#39;location\u0026#39;: \u0026#39;CA\u0026#39; }, lisi:{ \u0026#39;first\u0026#39;: \u0026#39;li\u0026#39; \u0026#39;last\u0026#39;: \u0026#39;si\u0026#39; \u0026#39;location\u0026#39;: \u0026#39;JP\u0026#39; }, } 用户输入和While 循环 input函数 函数input()接受一个参数，在用input函数是要指定清楚的提示，准确的让用户输入信息\n1 2 name = input(\u0026#39;please enter your name:\u0026#39;) print(f\u0026#34;\\nhello,{name}\u0026#34;) int()获取数值输入 用input输入一个数字，python会把它当成字符串，所以要用函数int（）将数的字符串转换为数值表示\n1 2 3 4 5 \u0026gt;\u0026gt;\u0026gt; age = input(\u0026#34;how old are you?\u0026#34;) how old are you? 21 \u0026gt;\u0026gt;\u0026gt; age = int(age) \u0026gt;\u0026gt;\u0026gt; age \u0026gt;= 18 True 求模运算符 求模运算符%，将两个数相除并返回余数，可以用这个来判断奇数还是偶数\n1 2 3 4 5 6 \u0026gt;\u0026gt;\u0026gt; 4 % 3 1 \u0026gt;\u0026gt;\u0026gt; 6 % 3 0 \u0026gt;\u0026gt;\u0026gt; 7 % 3 1 while循环 for循环针对集合中的每个元素都执行一次，而while循环是不断运行，知道条件不满足为止\n1 2 3 4 number = 1 while number \u0026lt;= 5: print(number) number+= 1 让用户选择什么时候退出，我们可以直接在while循环中定义一个退出值，当用户输入名字之后只要没有输入quit就可以一直输入名字\n1 2 3 4 5 6 7 8 9 a = \u0026#34;你的名字是： \u0026#34; #前面创建一些个变量 b = \u0026#34;你退出了\u0026#34; cc = \u0026#34;\u0026#34; while cc !=\u0026#34;quit\u0026#34;: #while条件 只要cc不是quit就不停了 cc = input(\u0026#34;请输入你的名字：\u0026#34;) if cc !=\u0026#34;quit\u0026#34;: print(cc) #变量cc不是quit就打印刚刚输入的名字，然后回头继续执行while，因为没有结束的条件 else: print(b) #变量cc是quit了，就打印出来b了，然后while循环也停止了 使用标志，break，continue来控制循环 break立即退出循环，python循环中都可以使用break来退出循环\n1 2 3 4 5 6 7 pd = True #创建一个标志 pd 当pd为True的时候循环正常运行 while pd: message = input() if message == \u0026#39;quit\u0026#39;: #当输入的值为quit的时候，标志pd 变成False，程序就停止了 pd = False #也可以把这一行直接改成break，这样当message为quit的时候就直接退出循环 else: print(message) continue更像是弹出当前的命令从头去再次执行，并不是直接退出\n1 2 3 4 5 6 nb = 0 while nb \u0026lt;= 10: #nb小于等于10就执行while循环 nb += 1 if nb % 2 == 0: #如果nb能被2整除那就弹出从头开始，不继续下面的指令了 continue print(nb) 用while循环中处理列表和字典 for循环是一种遍历列表的有效方式，但不适合用for来修改列表，这样会让python难以跟踪里面的元素，while循环可以在遍历的同时进行修改\n1 2 3 4 5 6 7 8 unconfirmed_users = [\u0026#39;a\u0026#39;,\u0026#39;b\u0026#39;,\u0026#39;c\u0026#39;] #没有验证的用户 confirmed_users = [] #创建一个验证用户的列表 while unconfirmed_users: #这里while就会去循环列表中的用户 current_users = unconfirmed_users.pop() #把循环过的用户弹出到验证用户的列表中 confirmed_users.append(current_users) #把验证列表中的用户加入到验证用户的列表中 print(confirmed_users) 用while循环去删除列表中的元素\n1 2 3 4 5 pets = [\u0026#39;cat\u0026#39;,\u0026#39;cat\u0026#39;,\u0026#39;dog\u0026#39;,\u0026#39;rabbit\u0026#39;,\u0026#39;fish\u0026#39;] print(pets) while \u0026#39;cat\u0026#39; in pets: #如果cat在这个宠物列表中 pets.remove(\u0026#39;cat\u0026#39;) #那就从这个宠物列表中移除 print(pets) 函数 定义函数 1 2 3 4 def hello(user_name): #用def告诉python我要定义一个函数 print(f\u0026#34;hello, {user_name.title()}!\u0026#34;) # ：后面的所有缩进行就变成了函数体 hello(\u0026#39;tarkyn\u0026#39;) #最后可以直接使用函数 变量username是一个形参，值tarkyn是一个实参\n设置默认值 1 2 3 4 5 def describe_pet(pet_name, animal_type=\u0026#34;dog\u0026#34;): # 编写函数时，可以给给一个形参默认值 print(f\u0026#34;my {animal_type}\u0026#39;s name is {pet_name.title()}.\u0026#34;) describe_pet(pet_name=\u0026#34;阿黄\u0026#34;) 返回值 函数并非总是直接输出，函数返回的值都称为返回值,可以用return语句将值返回到调用函数的代码行\n1 2 3 4 5 def get_name(first_name, last_name): full_name = f\u0026#34;{first_name} {last_name}\u0026#34; return full_name.title() name = get_name(\u0026#39;Jinqi\u0026#39;,\u0026#39;Tao\u0026#39;) print(name) 可选的实参 选择一个额外的选项，可以让需要的人输入\n1 2 3 4 5 6 7 8 9 def get_name(first_name, last_name, middlea_name=\u0026#39;\u0026#39;): if middlea_name: full_name = f\u0026#34;{first_name} {middlea_name} {last_name}\u0026#34; else: full_name = f\u0026#34;{first_name} {last_name}\u0026#34; return full_name.title() name = get_name(\u0026#39;Jinqi\u0026#39;,\u0026#39;Tao\u0026#39;) print(name) 返回字典 1 2 3 4 5 6 7 def build_person(first_name, last_name, age=None): person = {\u0026#39;first\u0026#39;:first_name,\u0026#39;last\u0026#39;:last_name} if age: person[\u0026#39;age\u0026#39;]=age return person a_person = build_person(\u0026#39;tao\u0026#39;,\u0026#39;jinqi\u0026#39;,age=20) print(a_person) 传递列表 1 2 3 4 5 6 7 def greet_users(names): for name in names: msg = f\u0026#34;hello, {name.title()}\u0026#34; print(msg) username = [\u0026#39;a\u0026#39;,\u0026#39;b\u0026#39;,\u0026#39;c\u0026#39;] greet_users(username) 传递任意数量的实参 1 2 3 4 5 def make_pizza(size,*toppings): # 形参名 *topping 中的 * 让python创建一个topping的空元组 print(size,toppings) make_pizza(16,\u0026#39;a\u0026#39;) make_pizza(20,\u0026#39;a\u0026#39;,\u0026#39;b\u0026#39;,\u0026#39;c\u0026#39;) 1 2 3 4 5 6 7 8 9 10 def profile(first, last, **user_info): user_info[\u0026#39;first_name\u0026#39;] = first user_info[\u0026#39;last_name\u0026#39;] = last return user_info user_profile = profile(\u0026#39;tao\u0026#39;,\u0026#39;jinqi\u0026#39;, location=\u0026#39;shanghai\u0026#39;, gender= \u0026#39;male\u0026#39; ) print(user_profile) 将函数保存在模块中 pizza.py，一个单独的pizza模块\n1 2 3 import pizza # 导入这个函数模块 pizza.make_pizza(20,\u0026#39;a\u0026#39;,\u0026#39;b\u0026#39;) 1 2 3 import pizza as pz # 可以用 as 给函数指定别名 pz.make_pizza(20,\u0026#39;a\u0026#39;,\u0026#39;b\u0026#39;) 1 from pizza import pizza_1, pizza_2 # 导入模块中的特定函数 1 from pizza import * # 导入模块中的所有函数 类 ","date":"2022-08-01T00:00:00Z","permalink":"https://blog.tjq.one/p/python-%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/","title":"Python 基础笔记"}]